
 .include "m16def.inc"
 .dseg
_tmp_: .byte 2
.def temp = r16
.def digit1 = r17
.def digit2 = r18
.def temp1 =r19

.cseg
ldi temp, low(RAMEND)
out SPL, temp
ldi temp, high(RAMEND)
out SPH, temp
ldi temp,0b11111100
out DDRD,temp
ldi temp,0b11110000
out DDRC,temp
rcall lcd_init    ; initialize screen

read:
	ldi r24,20
	rcall scan_keypad_rising_edge
	rcall keypad_to_ascii
	cpi r24,0
	breq read
	cpi r24,48
	brlo read
	cpi r24,58
	brge read
	mov temp,r24
	ldi r24,1
	rcall lcd_command
	ldi r24 ,low(1530) 
	ldi r25 ,high(1530) 
	rcall wait_usec 
	mov r24,temp
	rcall lcd_data
	ldi r24,'*'
	rcall lcd_data
	mov r24,temp
	subi r24,48
	mov digit1,r24
second_read:
	ldi r24,20
	rcall scan_keypad_rising_edge
	rcall keypad_to_ascii
	cpi r24,0
	breq second_read
	cpi r24,48
	brlo second_read
	cpi r24,58
	brge second_read
	mov temp,r24
	rcall lcd_data
	mov r24,temp
	subi r24,48
next1:
	mov digit2,r24
	ldi r24,'='
	rcall lcd_data
	mul digit1,digit2
	mov digit1,r0

	clr temp
	clr temp1
	ldi temp,16
dek:
	cp digit1,temp
	brlo mon
	inc temp1
	subi digit1,16
	rjmp dek
mon:
	mov digit2,digit1
	cpi digit2,10
	brge letter
	subi digit2,-48
	jmp next_dig
letter:
	subi digit2,-55
next_dig:
	mov digit1,temp1
	cpi digit1,10
	brge letter1
	subi digit1,-48
	jmp next_dig1
letter1:
	subi digit1,-55
next_dig1:
	mov r24,digit1
	rcall lcd_data
	mov r24,digit2
	rcall lcd_data
	


	rjmp read
	


lcd_init: 
	ldi r24 ,40 
	ldi r25 ,0 
	rcall wait_msec 
	ldi r24 ,0x30 
	out PORTD ,r24 
	sbi PORTD ,PD3 
	cbi PORTD ,PD3
	ldi r24 ,39 
	ldi r25 ,0 
	rcall wait_usec 
	ldi r24 ,0x30 
	out PORTD ,r24 
	sbi PORTD ,PD3 
	cbi PORTD ,PD3 
	ldi r24 ,39 
	ldi r25 ,0 
	rcall wait_usec 
	ldi r24 ,0x20 
	out PORTD ,r24 
	sbi PORTD ,PD3 
	cbi PORTD ,PD3 
	ldi r24 ,39 
	ldi r25 ,0 
	rcall wait_usec 
	ldi r24 ,0x28
	rcall lcd_command
	ldi r24 ,0x0c  
	rcall lcd_command 
	ldi r24 ,0x01  
	rcall lcd_command 
	ldi r24 ,low(1530) 
	ldi r25 ,high(1530) 
	rcall wait_usec 
	ldi r24 ,0x06 
	rcall lcd_command  
ret

lcd_data: 
	sbi PORTD ,PD2 
	rcall write_2_nibbles 
	ldi r24 ,43 
	ldi r25 ,0 
	rcall wait_usec 
ret

lcd_command: 
	cbi PORTD ,PD2 
	rcall write_2_nibbles 
	ldi r24 ,39
	ldi r25 ,0 
	rcall wait_usec
ret


write_2_nibbles: 
	push r24 
	in r25 ,PIND 
	andi r25 ,0x0f 
	andi r24 ,0xf0 
	add r24 ,r25 
	out PORTD ,r24 
	sbi PORTD ,PD3 
	cbi PORTD ,PD3 
	pop r24 
	swap r24 
	andi r24 ,0xf0
	add r24 ,r25 
	out PORTD ,r24 
	sbi PORTD ,PD3 
	cbi PORTD ,PD3 
ret


scan_row:
ldi r25 ,0x08 
back_: 
lsl r25 
dec r24 ; 
brne back_
out PORTC ,r25 
nop
nop 
in r24 ,PINC 
andi r24 ,0x0f 
ret 


scan_keypad:
ldi r24 ,0x01 
rcall scan_row
swap r24 
mov r27 ,r24 
ldi r24 ,0x02 
rcall scan_row
add r27 ,r24 
ldi r24 ,0x03 
rcall scan_row
swap r24 
mov r26 ,r24 
ldi r24 ,0x04 
rcall scan_row
add r26 ,r24 
movw r24 ,r26 
ret


scan_keypad_rising_edge:
mov r22 ,r24 
rcall scan_keypad 
push r24 
push r25
mov r24 ,r22 
ldi r25 ,0 
rcall wait_msec
rcall scan_keypad 
pop r23 
pop r22 
and r24 ,r22
and r25 ,r23
ldi r26 ,low(_tmp_) 
ldi r27 ,high(_tmp_) 
ld r23 ,X+
ld r22 ,X
st X ,r24 
st -X ,r25 
com r23
com r22 
and r24 ,r22
and r25 ,r23
ret

keypad_to_ascii: 
movw r26 ,r24 
ldi r24 ,'*'
sbrc r26 ,0
ret
ldi r24 ,'0'
sbrc r26 ,1
ret
ldi r24 ,'#'
sbrc r26 ,2
ret
ldi r24 ,'D'
sbrc r26 ,3 
ret 
ldi r24 ,'7'
sbrc r26 ,4
ret
ldi r24 ,'8'
sbrc r26 ,5
ret
ldi r24 ,'9'
sbrc r26 ,6
ret
ldi r24 ,'C'
sbrc r26 ,7
ret
ldi r24 ,'4' 
sbrc r27 ,0 
ret
ldi r24 ,'5'
sbrc r27 ,1
ret
ldi r24 ,'6'
sbrc r27 ,2
ret
ldi r24 ,'B'
sbrc r27 ,3
ret
ldi r24 ,'1'
sbrc r27 ,4
ret
ldi r24 ,'2'
sbrc r27 ,5
ret
ldi r24 ,'3'
sbrc r27 ,6
ret
ldi r24 ,'A'
sbrc r27 ,7
ret
clr r24
ret

wait_usec:            /* waiting routines */
	sbiw r24,1
	nop
	nop
	nop
	nop
	brne wait_usec
	ret

wait_msec:
	push r24
	push r25
	ldi r24,low(998)
	ldi r25,high(998)
	rcall wait_usec
	pop r25
	pop r24
	sbiw r24,1
	brne wait_msec
	ret

