;;==================================================================================
.DSEG
_tmp_: .byte 2


.CSEG

.include "m16def.inc"
.org 0x0
rjmp reset
.org 0x4
rjmp ISR1			;Routine for interrupt 1
.org 0x10
rjmp ISR_TIMER1_OVF ; ρουτίνα εξυπηρέτησης της διακοπής υπερχείλισης του timer1


;; Your Routines here

.org 0x200
reset:	
		; Stack initialize
		ldi r24 , low(RAMEND) ; initialize stack pointer
		out SPL , r24
		ldi r24 , high(RAMEND)
		out SPH , r24
		;--------------------
		
		; Keyboard initialize 
		ldi r24 ,(1 << PC7) | (1 << PC6) | (1 << PC5) | (1 << PC4) ; θέτει ως εξόδους τα 4 MSB
		out DDRC ,r24
		
		; Initializes the tmp
		ldi r24,0x00		
		ldi r25,0x00
		ldi r26 ,low(_tmp_)			;r26:r27 makes thw register X
		ldi r27 ,high(_tmp_)
		st X+ ,r24				;store in the address of X zero
		st X ,r25		
		;--------------------
		
		; Interrupt timer initialize
		ldi r24 ,(1<<TOIE1) ; ενεργοποίηση διακοπής υπερχείλισης του μετρητή TCNT1
		out TIMSK ,r24	
		ldi r24 ,(1<<CS12) | (0<<CS11) | (1<<CS10) ; CK/1024 
		out TCCR1B ,r24
		;-------------------------
		
		; energopoihsh diakophs tou INT1
		ldi r24 ,( 1 << ISC11) | ( 1 << ISC10)
		out MCUCR , r24 ; προκαλείται με σήμα θετικής ακμής
		ldi r24 ,( 1 << INT1) ; Ενεργοποίησε τη διακοπή INT1
		out GICR , r24
		;--------------------------
		
		; Initialize portb for output
		ser r25			; initialize PORTB for output
		out DDRB, r25
		;-----------------------------

;; Your main code here

		; Diabase ston r21
		in r21, PINA
		;-----------------


		; Kalesma diabasmatos
		ldi r24, 0x14 ;To kratame gia ton spinthirismo 
		rcall scan_keypad_rising_edge
		rcall keypad_to_ascii
		; --------------------

;;==================================================================================


;;==================================================================================
;;===========================  USEFULL ROUTINES ====================================
;;==================================================================================

;;=========================================================
;;============== DELAY ROUTINES ===========================	
;;=========================================================

wait_usec:
		sbiw r24 ,1 ; 2 κύκλοι (0.250 μsec)
		nop ; 1 κύκλος (0.125 μsec)
		nop ; 1 κύκλος (0.125 μsec)
		nop ; 1 κύκλος (0.125 μsec)
		nop ; 1 κύκλος (0.125 μsec)
		brne wait_usec ; 1 ή 2 κύκλοι (0.125 ή 0.250 μsec)
		ret 

;; Waits for "r25:r24" msecs
wait_msec:
		push r24 ; 2 κύκλοι (0.250 μsec)
		push r25 ; 2 κύκλοι
		ldi r24 , low(998) ; φόρτωσε τον καταχ. r25:r24 με 998 (1 κύκλος - 0.125 μsec)
		ldi r25 , high(998) ; 1 κύκλος (0.125 μsec)
		rcall wait_usec ; 3 κύκλοι (0.375 μsec), προκαλεί συνολικά καθυστέρηση 998.375 μsec
		pop r25 ; 2 κύκλοι (0.250 μsec)
		pop r24 ; 2 κύκλοι
		sbiw r24 , 1 ; 2 κύκλοι
		brne wait_msec ; 1 ή 2 κύκλοι (0.125 ή 0.250 μsec)
		ret


;;=========================================================
;;============= KEYPAD ROUTINES ===========================	
;;=========================================================

scan_row:
		ldi r25 ,0x08 ; αρχικοποίηση με ‘0000 1000’
back_:	lsl r25 ; αριστερή ολίσθηση του ‘1’ τόσες θέσεις
		dec r24 ; όσος είναι ο αριθμός της γραμμής
		brne back_
		out PORTC ,r25 ; η αντίστοιχη γραμμή τίθεται στο λογικό ‘1’
		nop
		nop ; καθυστέρηση για να προλάβει να γίνει η αλλαγή κατάστασης
		in r24 ,PINC ; επιστρέφουν οι θέσεις (στήλες) των διακοπτών που είναι πιεσμένοι
		andi r24 ,0x0f ; απομονώνονται τα 4 LSB όπου τα ‘1’ δείχνουν που είναι πατημένοι
		ret


scan_keypad:
		ldi r24 ,0x01 ; έλεγξε την πρώτη γραμμή του πληκτρολογίου
		rcall scan_row
		swap r24 ; αποθήκευσε το αποτέλεσμα
		mov r27 ,r24 ; στα 4 msb του r27
		ldi r24 ,0x02 ; έλεγξε τη δεύτερη γραμμή του πληκτρολογίου
		rcall scan_row
		add r27 ,r24 ; αποθήκευσε το αποτέλεσμα στα 4 lsb του r27
		ldi r24 ,0x03 ; έλεγξε την τρίτη γραμμή του πληκτρολογίου
		rcall scan_row
		swap r24 ; αποθήκευσε το αποτέλεσμα
		mov r26 ,r24 ; στα 4 msb του r26
		ldi r24 ,0x04 ; έλεγξε την τέταρτη γραμμή του πληκτρολογίου
		rcall scan_row
		add r26 ,r24 ; αποθήκευσε το αποτέλεσμα στα 4 lsb του r26
		movw r24 ,r26 ; μετέφερε το αποτέλεσμα στους καταχωρητές r25:r24
		ret

;; Returns the key pressed in r25:r24
scan_keypad_rising_edge:
		mov r22 ,r24 ; αποθήκευσε το χρόνο σπινθηρισμού στον r22
		rcall scan_keypad ; έλεγξε το πληκτρολόγιο για πιεσμένους διακόπτες
		push r24 ; και αποθήκευσε το αποτέλεσμα
		push r25
		mov r24 ,r22 ; καθυστέρησε r22 ms (τυπικές τιμές 10-20 msec που καθορίζεται από τον
		ldi r25 ,0 ; κατασκευαστή του πληκτρολογίου – χρονοδιάρκεια σπινθηρισμών)
		rcall wait_msec
		rcall scan_keypad ; έλεγξε το πληκτρολόγιο ξανά και
		pop r23 ; απόρριψε όσα πλήκτρα εμφανίζουν
		pop r22 ; σπινθηρισμό
		and r24 ,r22
		and r25 ,r23
		ldi r26 ,low(_tmp_) ; φόρτωσε την κατάσταση των διακοπτών στην
		ldi r27 ,high(_tmp_) ; προηγούμενη κλήση της ρουτίνας στους r27:r26
		ld r23 ,X+
		ld r22 ,X
		st X ,r24 ; αποθήκευσε στη RAM τη νέα κατάσταση
		st -X ,r25 ; των διακοπτών
		com r23
		com r22 ; βρες τους διακόπτες που έχουν «μόλις» πατηθεί
		and r24 ,r22
		and r25 ,r23
		ret

;; Input r25:r24 from scan keypad rising edge
;; Returns the key pressed in ascii in r24
keypad_to_ascii: ; λογικό ‘1’ στις θέσεις του καταχωρητή r26 δηλώνουν
		movw r26 ,r24 ; τα παρακάτω σύμβολα και αριθμούς
		ldi r24 ,'*'
		sbrc r26 ,0
		ret
		ldi r24 ,'0'
		sbrc r26 ,1
		ret
		ldi r24 ,'#'
		sbrc r26 ,2
		ret
		ldi r24 ,'D'
		sbrc r26 ,3 ; αν δεν είναι ‘1’παρακάμπτει την ret, αλλιώς (αν είναι ‘1’)
		ret ; επιστρέφει με τον καταχωρητή r24 την ASCII τιμή του D.
		ldi r24 ,'7'
		sbrc r26 ,4
		ret
		ldi r24 ,'8'
		sbrc r26 ,5
		ret
		ldi r24 ,'9'
		sbrc r26 ,6
		ret
		ldi r24 ,'C'
		sbrc r26 ,7
		ret
		ldi r24 ,'4' ; λογικό ‘1’ στις θέσεις του καταχωρητή r27 δηλώνουν
		sbrc r27 ,0 ; τα παρακάτω σύμβολα και αριθμούς
		ret
		ldi r24 ,'5'
		sbrc r27 ,1
		ret
		ldi r24 ,'6'
		sbrc r27 ,2
		ret
		ldi r24 ,'B'
		sbrc r27 ,3
		ret
		ldi r24 ,'1'
		sbrc r27 ,4
		ret
		ldi r24 ,'2'
		sbrc r27 ,5
		ret
		ldi r24 ,'3'
		sbrc r27 ,6
		ret
		ldi r24 ,'A'
		sbrc r27 ,7
		ret
		clr r24
		ret

;;=========================================================
;;============= INTERRUPT ROUTINES ========================
;;=========================================================		

ISR1:				
	push r25		; Push Sreg and r25 VERY IMPORTANT !!!!!!!!
	in r25, sreg
	push r25
	
	;; Your code here
	
	pop r25			; Pop everything
	out sreg, r25
	pop r25
	reti
	
;
ISR_TIMER1_OVF:
	push r25		;Push sreg and r25 VERY IMPORTNATN!!!!!!
	in r25, sreg
	push r25
	cpi r27, 0xFF	;if all the leds are on go to the routine that turns them off except for the first
	breq LEDS_ON
	cpi r27, 0x00	; If they are all 0 do nothing
	breq proc_end
	cpi r27, 0x01	; If the first one is on turn it off
	breq LED_ON

LEDS_ON:			;53817.25dec\D239hex gia 0.5 sec 
	ldi r24,0xD2 ; αρχικοποίηση του TCNT1 to
	out TCNT1H ,r24 ; για υπερχείλιση μετά από 0.5 sec
	ldi r24 ,0x39
	out TCNT1L ,r24
	ser r27
	andi r27, 0x01
	rcall on
	jmp proc_end
LED_ON:
	clr r27
	rcall on

proc_end:
	pop r25
	out sreg, r25
	pop r25
	reti
	
	
;==================================AVR LCD LIBRARY=====================================

;======================================INITIALIZE LCD================================
	ser r24
	out DDRD ,r24
	rcall lcd_init			;initialize the screen
;====================================================================================

;===================================CLEAR THE SCREEN BY MYSELF===========================
		ldi r24 ,0x01 			; clear display
		rcall lcd_command
		ldi r24 ,low(1530)
		ldi r25 ,high(1530)
		rcall wait_usec
;=======================================================================================

;=======================LCD OUTPUT ROUTINES==============================================
 	
lcd_data: ;IF DATA IS IN R24!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	sbi PORTD ,PD2 			; επιλογή του καταχωρήτη δεδομένων (PD2=1)
	rcall write_2_nibbles 	; αποστολή του byte
	ldi r24 ,43 			; αναμονή 43μsec μέχρι να ολοκληρωθεί η λήψη
	ldi r25 ,0 				; των δεδομένων από τον ελεγκτή της lcd
	rcall wait_usec
	ret	
	
	
lcd_command: ;IF COMMAND IS IN R24!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	cbi PORTD ,PD2 			; επιλογή του καταχωρητή εντολών (PD2=1)
	rcall write_2_nibbles 	; αποστολή της εντολής και αναμονή 39μsec
	ldi r24 ,39 			; για την ολοκλήρωση της εκτέλεσης της από τον ελεγκτή της lcd.
	ldi r25 ,0 				; ΣΗΜ.: υπάρχουν δύο εντολές, οι clear display και return home,
	rcall wait_usec 		; που απαιτούν σημαντικά μεγαλύτερο χρονικό διάστημα.
	ret	
	
	
lcd_init:
	ldi r24 ,40 	; Όταν ο ελεγκτής της lcd τροφοδοτείται με
	ldi r25 ,0 		; ρεύμα εκτελεί την δική του αρχικοποίηση.
	rcall wait_msec ; Αναμονή 40 msec μέχρι αυτή να ολοκληρωθεί.
	ldi r24 ,0x30 	; εντολή μετάβασης σε 8 bit mode
	out PORTD ,r24 	; επειδή δεν μπορούμε να είμαστε βέβαιοι
	sbi PORTD ,PD3 	; για τη διαμόρφωση εισόδου του ελεγκτή
	cbi PORTD ,PD3 	; της οθόνης, η εντολή αποστέλλεται δύο φορές
	ldi r24 ,39
	ldi r25 ,0 		; εάν ο ελεγκτής της οθόνης βρίσκεται σε 8-bit mode
	rcall wait_usec ; δεν θα συμβεί τίποτα, αλλά αν ο ελεγκτής έχει διαμόρφωση
					; εισόδου 4 bit θα μεταβεί σε διαμόρφωση 8 bit
	ldi r24 ,0x30
	out PORTD ,r24
	sbi PORTD ,PD3
	cbi PORTD ,PD3
	ldi r24 ,39
	ldi r25 ,0
	rcall wait_usec
	ldi r24 ,0x20 		; αλλαγή σε 4-bit mode
	out PORTD ,r24
	sbi PORTD ,PD3
	cbi PORTD ,PD3
	ldi r24 ,39
	ldi r25 ,0
	rcall wait_usec
	ldi r24 ,0x28 		; επιλογή χαρακτήρων μεγέθους 5x8 κουκίδων
	rcall lcd_command 	; και εμφάνιση δύο γραμμών στην οθόνη
	ldi r24 ,0x0c 		; ενεργοποίηση της οθόνης, απόκρυψη του κέρσορα alliws an thelw anavosvhma xreiazomai 0x0f, an thelw apla na 					;yparxei vazw 0x0e
	rcall lcd_command
	ldi r24 ,0x01 		; καθαρισμός της οθόνης
	rcall lcd_command
	ldi r24 ,low(1530)
	ldi r25 ,high(1530)
	rcall wait_usec
	ldi r24 ,0x06 		; ενεργοποίηση αυτόματης αύξησης κατά 1 της διεύθυνσης
	rcall lcd_command 	; που είναι αποθηκευμένη στον μετρητή διευθύνσεων και
						; απενεργοποίηση της ολίσθησης ολόκληρης της οθόνης
	ret	

show_none:
	ldi r24,'N'
	rcall lcd_data
	ldi r24,'O'
	rcall lcd_data
	ldi r24,'N'
	rcall lcd_data
	ldi r24,'E'
	rcall lcd_data
	ret

;=======================================================================================


