include emu8086.inc
org 100h

main:
  
           
                 
        push ax
        push bx
        push cx
        push dx
        pusha 
        
        PRINT "DOSE 4 ARITHMOUS:"
     
        mov cx,4
        mov bx,0        

ignore: mov ah,8
        int 21h     ;waiting an input
        cmp al,'q'
        je telos
        cmp al,30h
        jl ignore
        cmp al,39h
        jg ignore   
         
        mov ah,0eh
        int 10h      
        sub al,48  ;change ASCII value to real value
        rol bx,4
        or bl,al
        loop ignore  ;insert from keyborad in hex form 
        
        ;bh bl dh dl -> x1 x2 x3 x4
        
        mov dl,bl
        mov bl,bh
        mov dh,dl
        and bh,0f0h
        ror bh,4
        and bl,0fh
        and dh,0f0h
        ror dh,4
        and dl,0fh
        
        

        
        
           
        push ax
        push dx
        MOV AH,9            ;Change line.
        MOV DX, offset msg3
        INT 21H
        pop dx
        pop ax  
              
        PRINT "MIN MAX:"  
        mov ah,0eh
        
   
        mov cl,0
   ordering:
        cmp bh,cl			;is bh<0?
        jne cont1
        mov al,bh
        add al,48
        int 10h
        jmp maximum
   cont1:
        cmp bl,cl			;is bl<0?
        jne cont2
        mov al,bl
        add al,48
        int 10h
        jmp maximum
   cont2:
        cmp dh,cl			;is dh<0?
        jne cont3
        mov al,dh
        add al,48
        int 10h
        jmp maximum
   cont3:
        cmp dl,cl			;is dl<0?
        jne cont4:
        mov al,dl
        add al,48
        int 10h
        jmp maximum
   cont4:
        inc cl
        cmp cl,10
        jne ordering
        
        
maximum:
        push ax
        mov ah,0eh
        mov al,' '
        int 10h
        pop ax
        

        
        mov ah,0eh
        mov cl,9
   ordering1:
        cmp bh,cl
        jne cont11
        mov al,bh
        add al,48
        int 10h
        jmp ending
   cont11:
        cmp bl,cl
        jne cont21
        mov al,bl
        add al,48
        int 10h
        jmp ending
   cont21:
        cmp dh,cl
        jne cont31
        mov al,dh
        add al,48
        int 10h
        jmp ending
   cont31:
        cmp dl,cl
        jne cont41:
        mov al,dl
        add al,48
        int 10h
        jmp ending
   cont41:
        dec cl
        jns ordering1
        
ending:        
        push ax
        push dx
        MOV AH,9            ;Change line.
        MOV DX, offset msg3
        INT 21H
        pop dx
        pop ax
        
        
        
        
        
       
        
        popa
        pop dx
        pop cx
        pop bx
        pop ax
        jmp main
                          
        
telos:        
        
         


ret

 
msg3 db 0ah,0dh,"$" 
sixteen dw 0010H            ;Constant sixteen = 16.
ten dw 000AH                ;Constant ten = 10.


